/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package vistas;

import DTO.DiscoDuro;
import DTO.SSD;
import DTO.StorageDevice;
import Metodos.TextPrompt;
import Repositorio.RepoDiscoDuro;
import Repositorio.RepoSSD;
import Repositorio.RepoStorageDivice;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jostin
 */
public class AddStorageDivices extends javax.swing.JDialog {

    TextPrompt ph;
    DiscoDuro dd = new DiscoDuro();
    SSD ssd = new SSD();
    RepoSSD RSSD = RepoSSD.getInstance();
    RepoDiscoDuro RDD = RepoDiscoDuro.getInstance();
    RepoStorageDivice RSD = RepoStorageDivice.getInstance();

    /**
     * Creates new form AddDiscoDuro
     */
    public AddStorageDivices(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(this);
        ph = new TextPrompt("Capacidad (GB)", capacidadDisco);
        ph = new TextPrompt("Velocidad -(seg)", speedDisco);
        ph = new TextPrompt("Nombre Unidad de almacenamiento", nombreUA);
        ph = new TextPrompt("Numero de discos", numeroDiscos);
        ph = new TextPrompt("Tiempo de escritura SSD", tiempoEscrituraSSD);
        capacidadDisco.setEditable(false);
        speedDisco.setEditable(false);
        nombreUA.setEditable(false);
        numeroDiscos.setEditable(false);
        tiempoEscrituraSSD.setEditable(false);
        capacidadDisco.setEnabled(false);
        speedDisco.setEnabled(false);
        nombreUA.setEnabled(false);
        numeroDiscos.setEnabled(false);
        tiempoEscrituraSSD.setEnabled(false);
        addSD.setEnabled(false);
        deleteSD.setEnabled(false);
        mostrar();

        TUA.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    FilaSelected();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        interfaces = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        capacidadDisco = new javax.swing.JTextField();
        speedDisco = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TUA = new javax.swing.JTable();
        ssdRB = new javax.swing.JRadioButton();
        discoRB = new javax.swing.JRadioButton();
        addSD = new javax.swing.JButton();
        deleteSD = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        nombreUA = new javax.swing.JTextField();
        numeroDiscos = new javax.swing.JTextField();
        tiempoEscrituraSSD = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Unidades De Almacenamiento");

        capacidadDisco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                capacidadDiscoKeyTyped(evt);
            }
        });

        speedDisco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                speedDiscoKeyTyped(evt);
            }
        });

        TUA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Tipo", "Nombre", "Capacidad", "Velocidad", "Estado"
            }
        ));
        jScrollPane1.setViewportView(TUA);

        interfaces.add(ssdRB);
        ssdRB.setText("SSD");
        ssdRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ssdRBActionPerformed(evt);
            }
        });

        interfaces.add(discoRB);
        discoRB.setText("Disco Duro");
        discoRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discoRBActionPerformed(evt);
            }
        });

        addSD.setBackground(new java.awt.Color(0, 153, 102));
        addSD.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addSD.setForeground(new java.awt.Color(255, 255, 255));
        addSD.setText("Agregar");
        addSD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSDActionPerformed(evt);
            }
        });

        deleteSD.setBackground(new java.awt.Color(204, 51, 0));
        deleteSD.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deleteSD.setForeground(new java.awt.Color(255, 255, 255));
        deleteSD.setText("Eliminar");
        deleteSD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSDActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("X");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        numeroDiscos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numeroDiscosKeyTyped(evt);
            }
        });

        tiempoEscrituraSSD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tiempoEscrituraSSDKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(60, 60, 60)))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGap(44, 44, 44)
                            .addComponent(ssdRB)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(discoRB)
                            .addGap(32, 32, 32))
                        .addComponent(capacidadDisco)
                        .addComponent(speedDisco)
                        .addComponent(nombreUA)
                        .addComponent(numeroDiscos)
                        .addComponent(tiempoEscrituraSSD, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(addSD)
                        .addGap(64, 64, 64)
                        .addComponent(deleteSD)))
                .addGap(42, 42, 42))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ssdRB)
                            .addComponent(discoRB))
                        .addGap(57, 57, 57)
                        .addComponent(nombreUA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(capacidadDisco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(speedDisco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tiempoEscrituraSSD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(numeroDiscos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteSD)
                            .addComponent(addSD)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        this.setVisible(false);
    }//GEN-LAST:event_jLabel4MouseClicked

    private void ssdRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ssdRBActionPerformed
        tiempoEscrituraSSD.setEditable(true);
        capacidadDisco.setEditable(true);
        speedDisco.setEditable(true);
        nombreUA.setEditable(true);
        capacidadDisco.setEnabled(true);
        speedDisco.setEnabled(true);
        nombreUA.setEnabled(true);
        numeroDiscos.setEnabled(false);
        tiempoEscrituraSSD.setEnabled(true);
        addSD.setEnabled(true);
    }//GEN-LAST:event_ssdRBActionPerformed

    private void discoRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discoRBActionPerformed
        capacidadDisco.setEditable(true);
        speedDisco.setEditable(true);
        nombreUA.setEditable(true);
        numeroDiscos.setEditable(true);
        capacidadDisco.setEnabled(true);
        speedDisco.setEnabled(true);
        nombreUA.setEnabled(true);
        numeroDiscos.setEnabled(true);
        tiempoEscrituraSSD.setEnabled(false);
        addSD.setEnabled(true);
    }//GEN-LAST:event_discoRBActionPerformed

    private void capacidadDiscoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_capacidadDiscoKeyTyped
        char validar = evt.getKeyChar();

        if (validar < '0' || validar > '9') {
            evt.consume();
        }
    }//GEN-LAST:event_capacidadDiscoKeyTyped

    private void speedDiscoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_speedDiscoKeyTyped
        char validar = evt.getKeyChar();

        if (validar < '0' || validar > '9') {
            evt.consume();
        }
    }//GEN-LAST:event_speedDiscoKeyTyped

    private void numeroDiscosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numeroDiscosKeyTyped
        char validar = evt.getKeyChar();

        if (validar < '0' || validar > '9') {
            evt.consume();
        }
    }//GEN-LAST:event_numeroDiscosKeyTyped

    private void tiempoEscrituraSSDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tiempoEscrituraSSDKeyTyped
        char validar = evt.getKeyChar();

        if (validar < '0' || validar > '9') {
            evt.consume();
        }
    }//GEN-LAST:event_tiempoEscrituraSSDKeyTyped

    private void addSDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSDActionPerformed
        double speed = Double.parseDouble(this.speedDisco.getText());
        double capacidad = Double.parseDouble(this.capacidadDisco.getText());
        if (ssdRB.isSelected()) {
            if (cantidadSSD() < 2) {
                if (!this.tiempoEscrituraSSD.getText().isEmpty() || !this.speedDisco.getText().isEmpty()
                        && !this.nombreUA.getText().isEmpty() || !this.capacidadDisco.getText().isEmpty()) {
                    double tiempoEscritura = Double.parseDouble(this.tiempoEscrituraSSD.getText());
                    this.ssd.setCapacidad(capacidad);
                    this.ssd.setVelocidad(speed);
                    this.ssd.setFunciona(true);
                    this.ssd.setNombre(nombreUA.getText());
                    this.ssd.setTiempoEscritura(tiempoEscritura);
                    this.ssd.setTipo(this.ssdRB.getText());

                    this.RSSD.agregar(ssd);
                    this.RSD.agregar(ssd);
                    mostrar();
                    this.speedDisco.setText("");
                    this.capacidadDisco.setText("");
                    this.tiempoEscrituraSSD.setText("");
                    this.nombreUA.setText("");
                } else {
                    JOptionPane.showMessageDialog(null, "LLene todos los campos.", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "No pueden haber mas de 2 SSD", "ERROR", JOptionPane.INFORMATION_MESSAGE);
            }
        } else if (discoRB.isSelected()) {
            if (cantidadDiscoDuro() < 1) {
                if (!this.speedDisco.getText().isEmpty() && !this.nombreUA.getText().isEmpty() 
                        && !this.capacidadDisco.getText().isEmpty() && !this.numeroDiscos.getText().isEmpty()) {
                    int numeroDiscos = Integer.parseInt(this.numeroDiscos.getText());
                    double capaXDisco = capacidad/numeroDiscos;
                    this.dd.setCapacidad(capacidad);
                    this.dd.setVelocidad(speed);
                    this.dd.setFunciona(true);
                    this.dd.setNombre(nombreUA.getText());
                    this.dd.setTipo(this.discoRB.getText());
                    this.dd.setNumberOfPlatters(numeroDiscos);
                    this.dd.setPlatterCapacity(capaXDisco);

                    this.RDD.agregar(dd);
                    this.RSD.agregar(dd);
                    mostrar();
                    this.speedDisco.setText("");
                    this.capacidadDisco.setText("");
                    this.tiempoEscrituraSSD.setText("");
                    this.nombreUA.setText("");
                    this.numeroDiscos.setText("");
                } else {
                    JOptionPane.showMessageDialog(null, "LLene todos los campos.", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "No pueden haber mas de un Disco Duro", "ERROR", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_addSDActionPerformed

    private void deleteSDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSDActionPerformed
        int row = this.TUA.getSelectedRow();
        if (row != -1) {
            this.RSD.eliminar(row);
            deleteSD.setEnabled(false);
        }
        mostrar();
    }//GEN-LAST:event_deleteSDActionPerformed

    public final void mostrar() {
        DefaultTableModel modelo = new DefaultTableModel();

        modelo = (DefaultTableModel) this.TUA.getModel();
        modelo.setNumRows(this.RSD.getStoragedevice().size());
        for (int j = 0; j < this.RSD.getStoragedevice().size(); j++) {
            modelo.setValueAt(this.RSD.getStoragedevice().get(j).getTipo(), j, 0);
            modelo.setValueAt(this.RSD.getStoragedevice().get(j).getNombre(), j, 1);
            modelo.setValueAt(this.RSD.getStoragedevice().get(j).getCapacidad(), j, 2);
            modelo.setValueAt(this.RSD.getStoragedevice().get(j).getVelocidad(), j, 3);
            if (this.RSD.getStoragedevice().get(j).isFunciona()) {
                modelo.setValueAt("Funciona", j, 4);
            } else {
                modelo.setValueAt("No unciona", j, 4);
            }
        }
    }

    public boolean FilaSelected() {
        if (this.TUA.getSelectedRow() != -1) {
            this.deleteSD.setEnabled(true);
        }
        return true;
    }

    public int cantidadSSD() {
        List<StorageDevice> sd = this.RSD.getStoragedevice();
        int resultado = 0;
        for (int i = 0; i < sd.size(); i++) {
            if (sd.get(i).getTipo().equals("SSD")) {
                resultado++;
            }
        }
        System.out.println(resultado);
        return resultado;
    }

    public int cantidadDiscoDuro() {
        List<StorageDevice> sd = this.RSD.getStoragedevice();
        int resultado = 0;
        for (int i = 0; i < sd.size(); i++) {
            if (sd.get(i).getTipo().equals("Disco Duro")) {
                resultado++;
            }
        }
        return resultado;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddStorageDivices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddStorageDivices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddStorageDivices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddStorageDivices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddStorageDivices dialog = new AddStorageDivices(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TUA;
    private javax.swing.JButton addSD;
    private javax.swing.JTextField capacidadDisco;
    private javax.swing.JButton deleteSD;
    private javax.swing.JRadioButton discoRB;
    private javax.swing.ButtonGroup interfaces;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nombreUA;
    private javax.swing.JTextField numeroDiscos;
    private javax.swing.JTextField speedDisco;
    private javax.swing.JRadioButton ssdRB;
    private javax.swing.JTextField tiempoEscrituraSSD;
    // End of variables declaration//GEN-END:variables
}
